/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.karimandco.cv;

import com.mysql.jdbc.Connection;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Sarah
 */
public class CreationDuCV extends javax.swing.JPanel {

    private ConnexionDB connexionDb = new ConnexionDB();
    private Connection connexion;

    public Integer idUtilisateur;
    private Integer idTabFormation = 1;
    private Integer idTabExperiencePro = 1;
    private Integer idCV = null;

    /**
     * Creates new form CreationDuCV
     */
    public CreationDuCV() {
        initComponents();
        connexion = connexionDb.getConnnexion();
        idUtilisateur = 16;
        try {
            chargerCV();
        } catch (SQLException ex) {
            Logger.getLogger(CreationDuCV.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelTitrePrincipal = new javax.swing.JLabel();
        jLabelTitre = new javax.swing.JLabel();
        jTextFieldTitre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTabbedPaneFormation = new javax.swing.JTabbedPane();
        jLabel4 = new javax.swing.JLabel();
        jTabbedPaneExperiencePro = new javax.swing.JTabbedPane();
        jLabelDescription = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaDescription = new javax.swing.JTextArea();
        jButtonValidationCV = new javax.swing.JButton();
        jLabelMaitrise = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jProgressBar2 = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jProgressBar3 = new javax.swing.JProgressBar();
        jLabel7 = new javax.swing.JLabel();
        jProgressBar4 = new javax.swing.JProgressBar();
        jTextFieldMaitrise1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextFieldLevelMaitrise1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jButtonValideFormation = new javax.swing.JButton();
        jButtonValideExperiencePro = new javax.swing.JButton();
        jButtonSupprimeCV = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jLabelTitrePrincipal.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabelTitrePrincipal.setText("Création de votre CV");

        jLabelTitre.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabelTitre.setText("Titre du CV");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Vos formations");

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Vos exprérience professionnel");

        jLabelDescription.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabelDescription.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelDescription.setText("Description CV");

        jTextAreaDescription.setColumns(20);
        jTextAreaDescription.setRows(5);
        jScrollPane1.setViewportView(jTextAreaDescription);

        jButtonValidationCV.setText("Validation création du CV");
        jButtonValidationCV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonValidationCVMouseClicked(evt);
            }
        });

        jLabelMaitrise.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabelMaitrise.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelMaitrise.setText("Maitrise");

        jLabel2.setText("Maitrise 1  :");

        jLabel5.setText("Maitrise 2 :");

        jLabel6.setText("Maitrise 3 :");

        jLabel7.setText("Maitrise 4 :");

        jTextFieldMaitrise1.setText("Titre de la maitrise");

        jTextField2.setText("Titre de la maitrise");

        jTextField3.setText("Titre de la maitrise");

        jTextField4.setText("Titre de la maitrise");

        jTextFieldLevelMaitrise1.setText("Niveau");
        jTextFieldLevelMaitrise1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldLevelMaitrise1KeyReleased(evt);
            }
        });

        jTextField6.setText("Niveau de maitrise");

        jTextField7.setText("Niveau de maitrise");

        jTextField8.setText("Niveau de maitrise");

        jButtonValideFormation.setText("validé");
        jButtonValideFormation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonValideFormationMouseClicked(evt);
            }
        });

        jButtonValideExperiencePro.setText("validé");
        jButtonValideExperiencePro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonValideExperienceProMouseClicked(evt);
            }
        });

        jButtonSupprimeCV.setText("x");
        jButtonSupprimeCV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSupprimeCVMouseClicked(evt);
            }
        });

        jLabel1.setText("%");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(187, 187, 187)
                .addComponent(jButtonValidationCV, javax.swing.GroupLayout.PREFERRED_SIZE, 748, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(156, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                    .addComponent(jTabbedPaneFormation, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                    .addComponent(jButtonValideFormation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTabbedPaneExperiencePro, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonValideExperiencePro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelDescription, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField7))
                    .addComponent(jProgressBar3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField8))
                    .addComponent(jProgressBar4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelMaitrise, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(15, 15, 15)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(18, 18, 18)
                            .addComponent(jTextFieldMaitrise1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel8)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextFieldLevelMaitrise1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel1))
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(232, 232, 232)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTitrePrincipal)
                    .addComponent(jLabelTitre)
                    .addComponent(jTextFieldTitre, javax.swing.GroupLayout.PREFERRED_SIZE, 634, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonSupprimeCV))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelTitrePrincipal)
                    .addComponent(jButtonSupprimeCV))
                .addGap(29, 29, 29)
                .addComponent(jLabelTitre)
                .addGap(18, 18, 18)
                .addComponent(jTextFieldTitre, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabelDescription))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jLabelMaitrise)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextFieldMaitrise1)
                            .addComponent(jTextFieldLevelMaitrise1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addComponent(jProgressBar3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addComponent(jProgressBar4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTabbedPaneFormation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTabbedPaneExperiencePro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonValideExperiencePro)
                            .addComponent(jButtonValideFormation))
                        .addGap(60, 60, 60)))
                .addComponent(jButtonValidationCV, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     *
     * @param evt
     */
    private void jButtonValidationCVMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonValidationCVMouseClicked
        int reply = JOptionPane.showConfirmDialog(null, "Etes-vous sûr de vouloir enregistrer votre Curriculum Vitae.", "Comfimez l'engistrer", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            this.connexion = this.connexionDb.reconnect();
            createCV();
        } else {
            // Message si NON
        }

    }//GEN-LAST:event_jButtonValidationCVMouseClicked

    /**
     * Permet de capturer les évenements touche relaché du champs de saisie
     * Maitrise 1 et rajouter la valeur correspondante dans la progresse bar.
     *
     * @param evt
     */
    private void jTextFieldLevelMaitrise1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldLevelMaitrise1KeyReleased
        String value = jTextFieldLevelMaitrise1.getText().equals("") ? "0" : jTextFieldLevelMaitrise1.getText();

        if (value.matches("[0-9]+")) {
            if (!value.equals("") && Integer.parseInt(value) >= 0 && Integer.parseInt(value) <= 100) {
                jProgressBar1.setValue(Integer.parseInt(value));
            }
        }
        System.out.println(jProgressBar1.getValue());
    }//GEN-LAST:event_jTextFieldLevelMaitrise1KeyReleased

    /**
     * Méthode permettant de rajouter des formations.
     *
     * @param evt
     */
    private void jButtonValideFormationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonValideFormationMouseClicked
        jTabbedPaneFormation.addTab("Formation " + idTabFormation, new Formation());
        idTabFormation++;
    }//GEN-LAST:event_jButtonValideFormationMouseClicked
    /**
     * Méthode permettant de rajouter des expériences pro.
     *
     * @param evt
     */
    private void jButtonValideExperienceProMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonValideExperienceProMouseClicked
        jTabbedPaneExperiencePro.addTab("Expérience Pro " + idTabExperiencePro, new ExperiencePro());
        idTabExperiencePro++;
    }//GEN-LAST:event_jButtonValideExperienceProMouseClicked

    /**
     * Methode d'événement pour gérer la suppression de cv.
     *
     * @param evt
     */
    private void jButtonSupprimeCVMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSupprimeCVMouseClicked
        int reply = JOptionPane.showConfirmDialog(null, "Etes-vous sûr de vouloir supprimer ce Curriculum Vitae.", "Comfimez la suppression !", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            // JOptionPane.showMessageDialog(CreationDuCV.this, "Bravo ! les pancakes xDD");

            // Ici, il va falloir exécuter la suppression du cv
            // et puis quand ça sera fait on peut supprimé toutes les formations et les expériences pro du CV
            try {
                if (this.idCV != null) {

                    boolean okExperiencePro = true;
                    boolean okFormation = true;
                    for (int i = 0; i < jTabbedPaneExperiencePro.getTabCount(); i++) {
                        ExperiencePro panelExperiencePro = (ExperiencePro) jTabbedPaneExperiencePro.getComponentAt(i);
                        okExperiencePro = this.supprimerExperiencePro(panelExperiencePro.getIdExperiencePro());
                    }
                    for (int i = 0; i < jTabbedPaneFormation.getTabCount(); i++) {
                        Formation panelFormation = (Formation) jTabbedPaneFormation.getComponentAt(i);
                        okFormation = this.supprimerFormation(panelFormation.getIdFormation());
                    }

                    if (okExperiencePro && okFormation) {
                        if (this.supprimerCV(idCV)) {
                            this.idCV = null;
                            this.chargerCV();
                            JOptionPane.showMessageDialog(this, "Curriculum Vitae a été supprimé avec succès.", "Curriculum Vitae supprimé", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(CreationDuCV.this, "Erreur ! Curriculum Vitae non supprimé");
                        }
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(CreationDuCV.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            // Message si NON
        }
    }//GEN-LAST:event_jButtonSupprimeCVMouseClicked

    /**
     * Permet de créer/insérer les données du cv dans la base de donné cv.
     */
    public void createCV() {

        boolean update = false;

        List<Map<String, Object>> cv = null;
        try {
            cv = getCV(idUtilisateur);
            if (cv != null && cv.size() > 0) {
                update = true;
            }
        } catch (SQLException ex) {
        }

        Statement req;
        Integer res = null;

        try {
            // Ici mettre l'id de l'uilisateur
            List<Map<String, Object>> utilisateur = getUtilisateur(idUtilisateur);

            if (utilisateur != null && utilisateur.size() > 0) {
                String titre = jTextFieldTitre.getText();
                if (!titre.equals("")) {

                    String description = jTextAreaDescription.getText();

                    if (!description.equals("")) {

                        int maitrise = jProgressBar1.getValue();
                        String nom_maitrise = jTextFieldMaitrise1.getText();

                        if (!nom_maitrise.equals("") && !nom_maitrise.equals("Titre de la maitrise")) {

                            Integer idUtilisateur = (Integer) utilisateur.get(0).get("id");
                            String signature = utilisateur.get(0).get("nom").toString().toUpperCase() + " " + utilisateur.get(0).get("nom").toString();
                            Integer idCV = null;

                            req = this.connexion.createStatement();

                            if (update) {
                                res = req.executeUpdate("UPDATE `cv` SET `titre` = '" + titre + "', `description` = '" + description + "', `nom_maitrise` = '" + nom_maitrise + "',`maitrise` = '" + maitrise + "' WHERE id = " + cv.get(0).get("id"));
                                idCV = (Integer) cv.get(0).get("id");
                            } else {
                                res = req.executeUpdate("INSERT INTO `cv` (`id`, `titre`, `description`, `signature`, `nom_maitrise`, `maitrise`, `id_utilisateur`) "
                                        + "VALUES (NULL, '" + titre + "', '" + description + "', '" + signature + "', '" + nom_maitrise + "', '" + maitrise + "', '" + idUtilisateur + "');", Statement.RETURN_GENERATED_KEYS);

                                ResultSet rs = req.getGeneratedKeys();
                                if (rs.next()) {
                                    // Ici, on récupère les id des dernières occurences insérer dans les tables formation et experience pro
                                    // idExperiencePro = new ExperiencePro().setEnvoieExperiencePro(rs.getInt(1));
                                    // idFormation = new Formation().setEnvoieFormation(rs.getInt(1)); // Il manquant une methode ici
                                    idCV = rs.getInt(1);

                                    // Je récupère l'id du cv lors de ça création et je le stocke dans une variable privé de la class
                                    this.idCV = idCV;
                                }
                            }

                            if (this.sauvegardeToutForamtion(idCV) && this.sauvegardeToutExperiencePro(idCV)) {
                                if (res != null) {
                                    JOptionPane.showMessageDialog(this,
                                            update ? "Curriculum Vitae a été mise à jour avec succès." : "Curriculum Vitae a été créé avec succès.",
                                            update ? "Mise à jour Curriculum Vitae" : "Création Curriculum Vitae",
                                            JOptionPane.INFORMATION_MESSAGE);
                                } else {
                                    JOptionPane.showMessageDialog(this, "Une erreur a été détecté lors de la création de votre CV veuillez réessayer.\n"
                                            + "Si le problème persistent veuillez réessayer ultérieurement", "Curriculum Vitae non créé", JOptionPane.WARNING_MESSAGE);
                                }
                            } else {
                                JOptionPane.showMessageDialog(this, "Une erreur s'est produite lors de l'enregistrement de vos formations ou de vos expérience professionnel.", "Error..", JOptionPane.ERROR_MESSAGE);
                            }

                        } else {
                            JOptionPane.showMessageDialog(this, "Veuillez saisir le nom de la catégorie à votre maitrise.");
                        }

                    } else {
                        JOptionPane.showMessageDialog(this, "Veuillez saisir une description à votre Curriculum Vitae.");
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Il faut impérativement un titre à votre Curriculum Vitae.");
                }

            } else {
                JOptionPane.showMessageDialog(this, "Vous n'êtes pas un utilisateur valide.");
            }
        } catch (SQLException ex) {
            Logger.getLogger(CreationDuCV.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Elle permet d'appeler la méthode qui permet d'enregistrer les
     * informations de la formation de chaque panel qui est contenu dans
     * "jTabbedPaneFormation". Elle renvoie "true" ou "false" si il y a eu une
     * erreur ou pas.
     *
     * @param args
     * @return boolean
     */
    public boolean sauvegardeToutForamtion(Integer... args) {
        Integer idCV = args[0];
        Boolean erreur = true;
        for (int i = 0; i < jTabbedPaneFormation.getTabCount(); i++) {
            Formation panelFormation = (Formation) jTabbedPaneFormation.getComponentAt(i);
            erreur = panelFormation.setEnvoieFormation(idCV) == null ? false : true;
            if (erreur) {
                this.onSupprimeFormation(panelFormation);
            }
        }
        return erreur;
    }

    /**
     * Elle permet d'appeler la méthode qui permet d'enregistrer les
     * informations de l'expérience professionnelle de chaque panel qui est
     * contenu dans "jTabbedPaneExperiencePro". Elle renvoie "true" ou "false"
     * si il y a eu une erreur ou pas.
     *
     * @param args
     * @return boolean
     */
    public boolean sauvegardeToutExperiencePro(Integer... args) {
        Integer idCV = args[0];
        Boolean erreur = true;
        for (int i = 0; i < jTabbedPaneExperiencePro.getTabCount(); i++) {
            ExperiencePro panelExperiencePro = (ExperiencePro) jTabbedPaneExperiencePro.getComponentAt(i);
            erreur = panelExperiencePro.setEnvoieExperiencePro(idCV) == null ? false : true;
            if (erreur) {
                this.onSupprimeExperiencePro(panelExperiencePro);
            }
        }
        return erreur;
    }

    /**
     * Permet d'auto charger un cv avec tous les formations et toutes les
     * expériences professionnelles, si il en existe un dans la base de donnée.
     * Cette méthode possède aussi des conditions qui permettent d'initialiser
     * les panels si aucun CV n'a été créé.
     *
     * @throws SQLException
     */
    public void chargerCV() throws SQLException {
        List<Map<String, Object>> cv = getCV(idUtilisateur), formation = getFormation(idUtilisateur), experiencePro = getExperiencePro(idUtilisateur);

        if (cv != null && cv.size() > 0) {
            jTextFieldTitre.setText((String) cv.get(0).get("titre"));
            jTextAreaDescription.setText((String) cv.get(0).get("description"));
            jProgressBar1.setValue(Integer.parseInt((String) cv.get(0).get("maitrise")));
            jTextFieldLevelMaitrise1.setText((String) cv.get(0).get("maitrise"));
            jTextFieldMaitrise1.setText((String) cv.get(0).get("nom_maitrise"));

            // Je récupère l'id du cv et je le stocke dans une variable privé de la class
            this.idCV = (Integer) cv.get(0).get("id");

            jTabbedPaneFormation.removeAll();
            jTabbedPaneExperiencePro.removeAll();
            
            if (formation != null && formation.size() > 0) {

                for (int i = 0; i < formation.size(); i++) {
                    Map<String, Object> formationData;
                    formationData = formation.get(i);

                    Formation formation1 = new Formation();

                    formation1.setIdFormation((Integer) formationData.get("id"));
                    formation1.setIdCV((Integer) formationData.get("id_cv"));
                    formation1.setIdTab(idTabFormation);
                    formation1.getjTextFieldNomFormation().setText((String) formationData.get("nom"));
                    formation1.getjTextFieldAdresseFormation().setText((String) formationData.get("lieu"));
                    formation1.getjTextAreaDescriptionFormation().setText((String) formationData.get("description"));
                    formation1.getClassDate1().setText((String) formationData.get("annee_debut").toString());
                    formation1.getClassDate2().setText((String) formationData.get("annee_fin").toString());

                    this.onSupprimeFormation(formation1);

                    jTabbedPaneFormation.addTab("Formation " + idTabFormation, formation1);
                    idTabFormation++;
                }
            }

            if (experiencePro != null && experiencePro.size() > 0) {
                for (int j = 0; j < experiencePro.size(); j++) {
                    Map<String, Object> experienceProData;
                    experienceProData = experiencePro.get(j);

                    ExperiencePro experiencePro1 = new ExperiencePro();

                    experiencePro1.setIdExperiencePro((Integer) experienceProData.get("id"));
                    experiencePro1.setIdCV((Integer) experienceProData.get("id_cv"));
                    experiencePro1.setIdTab(idTabExperiencePro);
                    experiencePro1.getjTextFieldNomEntpExpPro().setText((String) experienceProData.get("entreprise"));
                    experiencePro1.getjTextFieldAdresseExpPro().setText((String) experienceProData.get("adresse"));
                    experiencePro1.getjTextAreaDescriptionExpPro().setText((String) experienceProData.get("description"));
                    experiencePro1.getClassDate1().setText((String) experienceProData.get("annee_debut").toString());
                    experiencePro1.getClassDate2().setText((String) experienceProData.get("annee_fin").toString());

                    this.onSupprimeExperiencePro(experiencePro1);

                    jTabbedPaneExperiencePro.addTab("Expérience Pro " + idTabExperiencePro, experiencePro1);
                    idTabExperiencePro++;
                }
            }

            jButtonValidationCV.setText("Mettre à jour le CV");
            jLabelTitrePrincipal.setText("Mise à jour de votre cv");
        } else if (cv == null || cv.size() == 0) {
            jTabbedPaneFormation.removeAll();
            jTabbedPaneExperiencePro.removeAll();

            jTextFieldTitre.setText("");
            jTextAreaDescription.setText("");
            jProgressBar1.setValue(0);
            jTextFieldLevelMaitrise1.setText("Niveau de matrise");
            jTextFieldMaitrise1.setText("Titre de la maitrise");
        }

        // ces conditions permettent d'initialiser les panels si aucun CV n'a été créé
        if (formation == null || formation.size() == 0) {
            jTabbedPaneFormation.addTab("Formation " + idTabFormation, new Formation());
            idTabFormation++;
        }

        if (experiencePro == null || experiencePro.size() == 0) {
            jTabbedPaneExperiencePro.addTab("Expérience Pro " + idTabExperiencePro, new ExperiencePro());
            idTabExperiencePro++;
        }

    }

    /**
     * Cette méthode permet d'ajouter des événements cliques pour la suppression
     * d'une formation et donc permet aussi la suppression des formations.
     *
     * @param formation
     */
    public void onSupprimeFormation(Formation formation) {
        formation.getjButtonSupprimeFormation().addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                connexion = connexionDb.reconnect();
                int reply = JOptionPane.showConfirmDialog(null, "Etes-vous sûr de vouloir supprimer la formation n°" + formation.getIdTab() + ".", "Comfimez la suppression !", JOptionPane.YES_NO_OPTION);
                if (reply == JOptionPane.YES_OPTION) {
                    try {

                        // JUSTE APRES ON RAJOUTE LE CODE SUPPRESSION DES INFORMATIONS DE LA FORMATION
                        // Pour récupèrer l'id de formation c'est -> formation.getIdFormation();
                        // Et pour supprimer le panel de la jTabbedPaneFormation c'est -> jTabbedPaneFormation.remove(formation);
                        if (supprimerFormation(formation.getIdFormation())) {
                            jTabbedPaneFormation.remove(formation);
                        } else {
                            JOptionPane.showMessageDialog(CreationDuCV.this, "Bravo ! les pancakes xDD");
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(CreationDuCV.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    // Message si NON
                }

            }

            @Override
            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });
    }

    /**
     * Cette méthode permet d'ajouter des événements cliques pour la suppression
     * d'une expérience professionnelle et donc permet aussi la suppression des
     * expériences professionnelles.
     *
     * @param experiencePro
     */
    public void onSupprimeExperiencePro(ExperiencePro experiencePro) {
        experiencePro.getjButtonSupprimeExperiencePro().addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                connexion = connexionDb.reconnect();
                int reply = JOptionPane.showConfirmDialog(null, "Etes-vous sûr de vouloir supprimer l'expérience professionnelle n°" + experiencePro.getIdTab() + ".", "Comfimez la suppression !", JOptionPane.YES_NO_OPTION);
                if (reply == JOptionPane.YES_OPTION) {
                    try {

                        // JUSTE APRES ON RAJOUTE LE CODE SUPPRESSION DES INFORMATIONS DE LA FORMATION
                        // Pour récupèrer l'id de Exp. Pro c'est -> experiencePro.getIdExperiencePro();
                        // Et pour supprimer le panel de la jTabbedPaneExperiencePro c'est -> jTabbedPaneExperiencePro.remove(experiencePro);
                        if (supprimerExperiencePro(experiencePro.getIdExperiencePro())) {
                            jTabbedPaneExperiencePro.remove(experiencePro);
                        } else {
                            JOptionPane.showMessageDialog(CreationDuCV.this, "Bravo ! les pancakes xDD");
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(CreationDuCV.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } else {
                    // Message si NON
                }

            }

            @Override
            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });
    }

    /**
     * Grâce à l'identifiant de la formation cette méthode est capable de supprimer une formation de la base de donnée.
     * 
     * @param idFormation
     * @return
     * @throws SQLException 
     */
    public boolean supprimerFormation(Integer idFormation) throws SQLException {
        Statement req;
        Integer res;
        if (idFormation != null) {
            req = this.connexion.createStatement();
            res = req.executeUpdate("DELETE FROM `formation` WHERE id = " + idFormation);
            // Ternaire java à voir sur internet
            return res != null ? true : false;
        }
        return false;
    }

    /**
     * Grâce à l'identifiant de l'expérience professionnelle cette méthode est capable de supprimer une expérience professionnelle de la base de donnée.
     * 
     * @param idExperiencePro
     * @return
     * @throws SQLException 
     */
    public boolean supprimerExperiencePro(Integer idExperiencePro) throws SQLException {
        Statement req;
        Integer res;
        if (idExperiencePro != null) {
            req = this.connexion.createStatement();
            res = req.executeUpdate("DELETE FROM `experience_pro` WHERE id = " + idExperiencePro);
            return res != null ? true : false;
        }
        return false;
    }

    /**
     * Grâce à l'identifiant d'un CV avec cette méthode on peut supprimer un CV de la base de donnée.
     * 
     * @param idCV
     * @return
     * @throws SQLException 
     */
    public boolean supprimerCV(Integer idCV) throws SQLException {
        Statement req;
        Integer res;
        if (idCV != null) {
            req = this.connexion.createStatement();
            res = req.executeUpdate("DELETE FROM `cv` WHERE id = " + idCV);
            return res != null ? true : false;
        }
        return false;
    }

    // Accesseurs ou mutateurs pour la base de donnée
    /**
     * Permet de récuperer toute les informations d'un utilisateur de puis la
     * base de donnée grace à l'id de l'utilisateur
     *
     * @param id
     * @return
     * @throws SQLException
     */
    public List<Map<String, Object>> getUtilisateur(Integer id) throws SQLException {
        if (this.connexion != null) {
            Statement req = this.connexion.createStatement();
            ResultSet res = req.executeQuery("SELECT * FROM utilisateurs WHERE id = " + id);

            if (res.isBeforeFirst()) {
                return resultSetToList(res);
            }
        }
        return null;
    }

    /**
     * Permet de récuperer toute les informations d'un cv de puis la base de
     * donnée grace à l'id de l'utilisateur
     *
     * @param id
     * @return
     * @throws SQLException
     */
    public List<Map<String, Object>> getCV(Integer id) throws SQLException {
        if (this.connexion != null) {
            Statement req = this.connexion.createStatement();
            ResultSet res = req.executeQuery("SELECT * FROM cv WHERE id_utilisateur = " + id);

            if (res.isBeforeFirst()) {
                return resultSetToList(res);
            }
            return null;
        }
        return null;
    }

    /**
     * Permet de récuperer toute les informations d'une formation de puis la
     * base de donnée grace à l'id de l'utilisateur
     *
     * @param id
     * @return
     * @throws SQLException
     */
    public List<Map<String, Object>> getFormation(Integer id) throws SQLException {
        List<Map<String, Object>> cv = getCV(id);
        if (cv != null) {
            Statement req = this.connexion.createStatement();
            ResultSet res = req.executeQuery("SELECT * FROM formation WHERE id_cv = " + cv.get(0).get("id"));

            if (res.isBeforeFirst()) {
                return resultSetToList(res);
            }
        }
        return null;
    }

    /**
     * Permet de récuperer toute les informations d'une Expérience pro de puis
     * la base de donnée grace à l'id de l'utilisateur
     *
     * @param id
     * @return
     * @throws SQLException
     */
    public List<Map<String, Object>> getExperiencePro(Integer id) throws SQLException {
        List<Map<String, Object>> cv = getCV(id);
        if (cv != null) {
            Statement req = this.connexion.createStatement();
            ResultSet res = req.executeQuery("SELECT * FROM experience_pro WHERE id_cv = " + cv.get(0).get("id"));

            if (res.isBeforeFirst()) {
                return resultSetToList(res);
            }
        }
        return null;
    }

    /**
     * Convertir le ResultSet en une liste de cartes, où chaque carte représente
     * une ligne avec columnNames et columValues
     *
     * @param res
     * @return
     * @throws SQLException
     */
    private List<Map<String, Object>> resultSetToList(ResultSet res) throws SQLException {
        ResultSetMetaData md = res.getMetaData();
        int columns = md.getColumnCount();
        List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();
        while (res.next()) {
            Map<String, Object> row = new HashMap<String, Object>(columns);
            for (int i = 1; i <= columns; ++i) {
                row.put(md.getColumnName(i), res.getObject(i));
            }
            rows.add(row);
        }
        return rows;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSupprimeCV;
    private javax.swing.JButton jButtonValidationCV;
    private javax.swing.JButton jButtonValideExperiencePro;
    private javax.swing.JButton jButtonValideFormation;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelDescription;
    private javax.swing.JLabel jLabelMaitrise;
    private javax.swing.JLabel jLabelTitre;
    private javax.swing.JLabel jLabelTitrePrincipal;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JProgressBar jProgressBar2;
    private javax.swing.JProgressBar jProgressBar3;
    private javax.swing.JProgressBar jProgressBar4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPaneExperiencePro;
    private javax.swing.JTabbedPane jTabbedPaneFormation;
    private javax.swing.JTextArea jTextAreaDescription;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextFieldLevelMaitrise1;
    private javax.swing.JTextField jTextFieldMaitrise1;
    private javax.swing.JTextField jTextFieldTitre;
    // End of variables declaration//GEN-END:variables
}
